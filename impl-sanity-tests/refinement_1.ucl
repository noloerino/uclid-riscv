// Performs refinement checks for all instructions, synthesizing them according to the relevant
// instructions fields.

module main {
    type * = common.*;
    define * = common.*;
    define * = encdec.*;
    type * = instructions.*; // needed to fix enum import bug
    const * = registers.*;
    const * = encdec.*;

    var imem : mem_t;
    var step : integer;
    var flush : boolean;

    instance impl : Datapath (imem : (imem), flush : (flush));
    instance spec : cpu (imem : (imem));

    instance ec : encdec ();

    type pipe_state_t = enum { UNSTARTED, WAITING, FLUSH, COMMIT, DONE };

    var i_state : pipe_state_t;
    var s_state : pipe_state_t;
    var shadow_impl_pc : pc_t;
    var shadow_impl_rf : regfile_t;
    var shadow_spec_pc0 : pc_t;
    var shadow_spec_pc1 : pc_t;
    var shadow_spec_rf0 : regfile_t;
    var shadow_spec_rf1 : regfile_t;

    var test_inst : inst_t; // variable under test
 
    const IMEM_PC_START : bv30 = 0x20000000bv30;
    const PC_START : bv32 = 0x80000000bv32;

    const GOAL_PC : bv32 = 0x80000004bv32;

    init {
        // randomly generate an instruction
        var rtype_i : rtype_t;
        var itype_arith_i : itype_arith_t;
        var itype_shift_i : itype_shift_t;
        var itype_mem_i : itype_mem_t;
        var stype_i : stype_t;
        var btype_i : btype_t;
        var utype_i : utype_t;
        var jal_i : jal_t;
        var jalr_i : jalr_t;
        // 9 possible instruction types to choose
        var i_choice : bv4;
        // avoid generating improper alignment memory ops
        // TODO initial reg value may cause misaligned
        if (itype_mem_i.inst == LW) {
            assume (itype_mem_i.imm[1:0] == 0bv2);
        }
        if (itype_mem_i.inst == LH || itype_mem_i.inst == LHU) {
            assume (itype_mem_i.imm[0:0] == 0bv1);
        }
        if (stype_i.inst == SW) {
            assume (stype_i.imm[1:0] == 0bv2);
        }
        if (stype_i.inst == SH) {
            assume (stype_i.imm[0:0] == 0bv1);
        }
        // avoid generating misaligned jump targets
        assume (btype_i.imm[1:0] == 0bv2);
        assume (jal_i.imm[1:0] == 0bv2);
        // instruction encoding
        case
            (i_choice == 0bv4) : { call (test_inst) = ec.encode_rtype(rtype_i); }
            (i_choice == 1bv4) : { call (test_inst) = ec.encode_itype_arith(itype_arith_i); }
            (i_choice == 2bv4) : { call (test_inst) = ec.encode_itype_shift(itype_shift_i); }
            (i_choice == 3bv4) : { call (test_inst) = ec.encode_itype_mem(itype_mem_i); }
            (i_choice == 4bv4) : { call (test_inst) = ec.encode_stype(stype_i); }
            (i_choice == 5bv4) : { call (test_inst) = ec.encode_btype(btype_i); }
            (i_choice == 6bv4) : { call (test_inst) = ec.encode_utype(utype_i); }
            (i_choice == 7bv4) : { call (test_inst) = ec.encode_jal(jal_i); }
            (i_choice == 8bv4) : { call (test_inst) = ec.encode_jalr(jalr_i); }
            default            : { test_inst = instructions.NOP; }
        esac

        flush = false;
        assume (imem[IMEM_PC_START + 0bv30] == instructions.NOP);
        assume (imem[IMEM_PC_START + 1bv30] == test_inst);

        assume (imem[IMEM_PC_START + 2bv30] == instructions.NOP);
        assume (imem[IMEM_PC_START + 3bv30] == instructions.NOP);
        assume (imem[IMEM_PC_START + 4bv30] == instructions.NOP);
        assume (imem[IMEM_PC_START + 5bv30] == instructions.NOP);
        assume (imem[IMEM_PC_START + 6bv30] == instructions.NOP);
        // assume (!(exists (a : mem_word_addr_t) :: ((a < IMEM_PC_START || a > IMEM_PC_START + 1bv30) && imem[a] != instructions.NOP))); // all else nops

        // TODO parameterize DMEM and regfile as arguments for model
        assume (impl.dmem == spec.dmem);
        step = 0;
        i_state = UNSTARTED;
        s_state = UNSTARTED;
    }

    next {
        assume (i_state == UNSTARTED || (impl.fe_pc <_u PC_START + 28bv32 && impl.fe_pc >=_u PC_START));
        assume (spec.pc <_u PC_START + 28bv32 && spec.pc >=_u PC_START);
        assume (impl.fe_pc[1:0] == 0bv2);

        case
            (i_state == UNSTARTED) : {
                i_state' = WAITING;
            }
            (i_state == WAITING) : {
                if (impl.fe_pc == GOAL_PC) {
                    flush' = true;
                    i_state' = FLUSH;
                }
            }
            (i_state == FLUSH) : {
                flush' = false;
                i_state' = COMMIT;
            }
            (i_state == COMMIT) : {
                // Due to flushing logic, if the branch is taken the next pc will be npc,
                // otherwise it will be fe_pc
                shadow_impl_pc' = if (impl.ew_br_taken || impl.ew_ctrl.pc_sel == ControlLogic.PC_SEL_ALU) then impl.npc else impl.fe_pc;
                shadow_impl_rf' = impl.regs;
                i_state' = DONE;
            }
        esac
        case
            (s_state == UNSTARTED || s_state == WAITING) : {
                if (spec.pc == GOAL_PC) {
                    s_state' = COMMIT;
                    shadow_spec_pc0' = spec.pc;
                    shadow_spec_rf0' = spec.regfile;
                }
            }
            (s_state == COMMIT) : {
                s_state' = DONE;
                shadow_spec_pc1' = spec.pc;
                shadow_spec_rf1' = spec.regfile;
            }
        esac
        if (i_state != DONE) {
            next(impl);
        }
        if (s_state != DONE) {
            next(spec);
        }
        step' = step + 1;
    }

    define spec_ok() : boolean = spec.exception.cause == X_NONE;

    invariant reaches_done : (step == 6) ==> (i_state == DONE && s_state == DONE);
    invariant when_done : (spec_ok() && i_state == DONE && s_state == DONE) ==>
        ((shadow_impl_pc == shadow_spec_pc0 && shadow_impl_rf == shadow_spec_rf0) ||
         (shadow_impl_pc == shadow_spec_pc1 && shadow_impl_rf == shadow_spec_rf1))
        ;
    invariant pc_aligned : (spec_ok() && i_state != DONE) ==> impl.fe_pc[1:0] == 0bv2;

    control {
        vobj = bmc_noLTL(6); // FIX: why does 'bmc' here not work?
        check;
        print_results;
        vobj.print_cex(
            test_inst,
            flush,
            step,
            imem,
            impl.npc,
            impl.fe_pc,
            impl.fe_inst,
            impl.fe_ctrl,
            impl.ew_pc,
            impl.ew_inst,
            impl.ew_ctrl,
            impl.ew_imm,
            impl.ew_br_taken,
            impl.ew_rd,
            impl.ew_rs2_val,
            impl.ew_alu_out,
            impl.regs,
            impl.illegal,
            i_state,
            s_state,
            spec.exception,
            shadow_impl_pc,
            shadow_impl_rf,
            shadow_spec_pc0,
            shadow_spec_rf0,
            shadow_spec_pc1,
            shadow_spec_rf1
        );
    }
}

