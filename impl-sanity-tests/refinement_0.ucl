// Performs refinement checks for non-control flow instructions.
module main {
    type * = common.*;
    define * = common.*;
    define * = encdec.*;
    type * = instructions.*; // needed to fix enum import bug
    const * = registers.*;
    const * = encdec.*;

    var reset : boolean;
    var imem : mem_t;
    var step : integer;

    instance impl : Datapath (reset : (reset), imem : (imem));
    instance spec : cpu (imem : (imem));

    type pipe_state_t = enum { UNSTARTED, WAITING, EXEC, COMMITTED, DONE };

    var i_state : pipe_state_t;
    var s_state : pipe_state_t;
    var shadow_impl_pc : pc_t;
    var shadow_impl_rf : regfile_t;
    var shadow_spec_pc : pc_t;
    var shadow_spec_rf : regfile_t;

    var test_inst : inst_t; // variable under test
 
    const IMEM_PC_START : bv30 = 0x20000000bv30;
    const PC_START : bv32 = 0x80000000bv32;

    const GOAL_PC : bv32 = 0x80000004bv32;

    init {
        var opcode : bv7;
        var f3 : bv3;
        var f7 : bv7;
        reset = true;
        // TODO test control flow insts
        // instruction validity checks
        opcode = get_opcode(test_inst);
        f3 = get_f3(test_inst);
        f7 = get_f7(test_inst);
        assume (opcode == OPCODE_I_ARITH || opcode == OPCODE_I_MEM || opcode == OPCODE_R || opcode == OPCODE_AUIPC || opcode == OPCODE_LUI || opcode == OPCODE_S);
        // TODO unconstrain f7, shouldn't be too hard
        assume (opcode == OPCODE_R ==> f7 == 0bv7);
        // all F3s for I_ARITH and R are valid
        assume (opcode == OPCODE_S ==> f3 <= F3_SW);
        assume (opcode == OPCODE_I_MEM ==> f3 == F3_LB || f3 == F3_LH || f3 == F3_LW || f3 == F3_LBU || f3 == F3_LHU);

        assume (imem[IMEM_PC_START + 0bv30] == instructions.NOP);
        assume (imem[IMEM_PC_START + 1bv30] == test_inst);
        assume (imem[IMEM_PC_START + 2bv30] == instructions.NOP);
        assume (imem[IMEM_PC_START + 3bv30] == instructions.NOP);
        assume (imem[IMEM_PC_START + 4bv30] == instructions.NOP);
        assume (imem[IMEM_PC_START + 5bv30] == instructions.NOP);

        // TODO parameterize DMEM and regfile as arguments for model
        assume (impl.dmem == spec.dmem);
        // assume (forall (a : mem_word_addr_t) :: ((a < IMEM_PC_START || a > IMEM_PC_START + 1bv30) ==> imem[a] == instructions.NOP)); // all else nops
        // assume (forall (a : mem_word_addr_t) :: ((a > IMEM_PC_START + 1bv30) ==> imem[a] == instructions.NOP)); // all else nops
        step = 0;
        i_state = UNSTARTED;
        s_state = UNSTARTED;
    }

    next {
        if (reset) {
            reset' = false;
        }
        case
            (i_state == UNSTARTED) : {
                i_state' = WAITING;
            }
            (i_state == WAITING) : {
                if (impl.fe_pc == GOAL_PC) {
                    i_state' = EXEC;
                }
            }
            (i_state == EXEC) : {
                if (impl.ew_pc == GOAL_PC) {
                    i_state' = COMMITTED;
                }
            }
            (i_state == COMMITTED) : {
                shadow_impl_pc' = impl.ew_pc;
                shadow_impl_rf' = impl.regs;
                i_state' = DONE;
            }
        esac
        case
            (s_state == UNSTARTED || s_state == WAITING) : {
                if (spec.pc == GOAL_PC) {
                    s_state' = EXEC;
                }
            }
            (s_state == EXEC) : {
                shadow_spec_pc' = spec.pc;
                shadow_spec_rf' = spec.regfile;
                s_state' = DONE;
            }
        esac
        if (i_state != DONE) {
            next(impl);
        }
        if (s_state != DONE) {
            next(spec);
        }
        step' = step + 1;
    }

    define spec_ok() : boolean = spec.exception.cause == X_NONE;

    invariant reaches_done : (step == 5) ==> (i_state == DONE && s_state == DONE);
    invariant when_done : (spec_ok() && i_state == DONE && s_state == DONE) ==>
        (shadow_impl_pc == shadow_spec_pc && shadow_impl_rf == shadow_spec_rf);
    invariant pc_aligned : (spec_ok() && i_state != DONE) ==> impl.fe_pc[1:0] == 0bv2;

    control {
        vobj = bmc_noLTL(5); // FIX: why does 'bmc' here not work?
        check;
        print_results;
        vobj.print_cex(
            reset,
            step,
            imem,
            impl.fe_pc,
            impl.fe_inst,
            impl.fe_ctrl,
            impl.ew_pc,
            impl.ew_inst,
            impl.ew_ctrl,
            impl.ew_imm,
            impl.ew_br_taken,
            impl.ew_rd,
            impl.ew_rs2_val,
            impl.ew_alu_out,
            impl.regs,
            impl.started,
            impl.illegal,
            test_inst,
            i_state,
            s_state,
            spec.exception,
            shadow_impl_pc,
            shadow_impl_rf,
            shadow_spec_pc,
            shadow_spec_rf
        );
    }
}

