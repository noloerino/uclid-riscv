module common {
    type inst_t             = bv32;
    type pc_t               = bv32;
    type mem_word_addr_t    = bv30;
    type mem_data_t         = bv32; // for simplicity, memory is word-addressed
    type mem_t              = [mem_word_addr_t]mem_data_t;
    type reg_data_t         = bv32;
    type reg_addr_t         = bv5;
    type regfile_t          = [reg_addr_t]reg_data_t;

    type mem_data_width_t   = enum { BYTE, HALF, WORD, DWORD };

    type exception_cause_t  = enum {
        X_NONE,             // "None" value if no exception has occurred
        X_MISALIGNED_MEM,   // Memory access not aligned to natural datatype width
        X_MISALIGNED_INST,  // ISA spec requires jump targets to be 4-byte aligned
        X_ECALL,            // Control transferred by user-space ecall instruction
        X_EBREAK,           // Control transferred by user-space ebreak instruction
        X_INVALID_INST      // Failed to decode instruction
    };

    define pc_to_mem_addr(pc : pc_t) : mem_word_addr_t = pc[31:2];
}

module instructions {
    // FIX: in order to use enums variants in module, the type must also be imported in the module being run
    type rtype_inst_t       = enum { ADD, SUB, SLL, SLT, SLTU, XOR, SRL, SRA, OR, AND };
    type rtype_t            = record { inst : rtype_inst_t, rd : bv5, rs1 : bv5, rs2 : bv5 };

    type itype_arith_inst_t = enum { ADDI, SLTI, SLTIU, XORI, ORI, ANDI };
    type itype_shift_inst_t = enum { SLLI, SRAI, SRLI }; 
    type itype_mem_inst_t   = enum { LB, LBU, LH, LHU, LW };
    type itype_arith_t      = record { inst : itype_arith_inst_t, rd : bv5, rs1 : bv5, imm : bv12 };
    type itype_shift_t      = record { inst : itype_shift_inst_t, rd : bv5, rs1 : bv5, shamt : bv5 };
    type itype_mem_t        = record { inst : itype_mem_inst_t, rd : bv5, rs1 : bv5, imm : bv12 };

    type stype_inst_t       = enum { SB, SH, SW };
    type stype_t            = record { inst : stype_inst_t, rs1 : bv5, rs2 : bv5, imm : bv12 };

    type btype_inst_t       = enum { BEQ, BNE, BLT, BGE, BLTU, BGEU };
    type btype_t            = record { inst : btype_inst_t, rs1 : bv5, rs2 : bv5, imm : bv13 };

    type utype_inst_t       = enum { AUIPC, LUI };
    type utype_t            = record { inst : utype_inst_t, rd : bv5, imm : bv32 };

    type jal_t              = record { rd : bv5, imm : bv21 };
    type jalr_t             = record { rd : bv5, rs1 : bv5, imm : bv12 };

    const NOP : inst_t      = 0x13bv32;
}

module registers {
    const x0 : bv5 = 0bv5;
    const x1 : bv5 = 1bv5;
    const x2 : bv5 = 2bv5;
    const x3 : bv5 = 3bv5;
    const x4 : bv5 = 4bv5;
    const x5 : bv5 = 5bv5;
    const x6 : bv5 = 6bv5;
    const x7 : bv5 = 7bv5;
    const x8 : bv5 = 8bv5;
    const x9 : bv5 = 9bv5;
    const x10 : bv5 = 10bv5;
    const x11 : bv5 = 11bv5;
    const x12 : bv5 = 12bv5;
    const x13 : bv5 = 13bv5;
    const x14 : bv5 = 14bv5;
    const x15 : bv5 = 15bv5;
    const x16 : bv5 = 16bv5;
    const x17 : bv5 = 17bv5;
    const x18 : bv5 = 18bv5;
    const x19 : bv5 = 19bv5;
    const x20 : bv5 = 20bv5;
    const x21 : bv5 = 21bv5;
    const x22 : bv5 = 22bv5;
    const x23 : bv5 = 23bv5;
    const x24 : bv5 = 24bv5;
    const x25 : bv5 = 25bv5;
    const x26 : bv5 = 26bv5;
    const x27 : bv5 = 27bv5;
    const x28 : bv5 = 28bv5;
    const x29 : bv5 = 29bv5;
    const x30 : bv5 = 30bv5;
    const x31 : bv5 = 31bv5;
    const x32 : bv5 = 32bv5;

    const zero : bv5 = 0bv5;
    const ra : bv5 = 1bv5;
    const sp : bv5 = 2bv5;
    const gp : bv5 = 3bv5;
    const tp : bv5 = 4bv5;
    const t0 : bv5 = 5bv5;
    const t1 : bv5 = 6bv5;
    const t2 : bv5 = 7bv5;
    const s0 : bv5 = 8bv5;
    const fp : bv5 = 8bv5;
    const s1 : bv5 = 9bv5;
    const a0 : bv5 = 10bv5;
    const a1 : bv5 = 11bv5;
    const a2 : bv5 = 12bv5;
    const a3 : bv5 = 13bv5;
    const a4 : bv5 = 14bv5;
    const a5 : bv5 = 15bv5;
    const a6 : bv5 = 16bv5;
    const a7 : bv5 = 17bv5;
    const s2 : bv5 = 18bv5;
    const s3 : bv5 = 19bv5;
    const s4 : bv5 = 20bv5;
    const s5 : bv5 = 21bv5;
    const s6 : bv5 = 22bv5;
    const s7 : bv5 = 23bv5;
    const s8 : bv5 = 24bv5;
    const s9 : bv5 = 25bv5;
    const s10 : bv5 = 26bv5;
    const s11 : bv5 = 27bv5;
    const t3 : bv5 = 28bv5;
    const t4 : bv5 = 29bv5;
    const t5 : bv5 = 30bv5;
    const t6 : bv5 = 31bv5;
}

module encdec {
    type * = common.*;
    type * = instructions.*;

    define get_opcode(inst: inst_t) : bv7 = inst[6:0];
    define get_i_imm(inst : inst_t) : bv12 = inst[31:20];
    define get_s_imm(inst : inst_t) : bv12 = inst[31:25] ++ inst[11:7];
    define get_b_imm(inst : inst_t) : bv13 = inst[31:31] ++ inst[7:7] ++ inst[30:25] ++ inst[11:8] ++ 0bv1;
    define get_u_imm(inst : inst_t) : bv32 = inst[31:12] ++ 0bv12;
    define get_j_imm(inst : inst_t) : bv21 = inst[31:31] ++ inst[19:12] ++ inst[20:20] ++ inst[30:21] ++ 0bv1;
    define get_rs2(inst : inst_t) : reg_addr_t = inst[24:20];
    define get_rs1(inst : inst_t) : reg_addr_t = inst[19:15];
    define get_rd(inst : inst_t) : reg_addr_t = inst[11:7];
    define get_f3(inst : inst_t) : bv3 = inst[14:12];
    define get_f7(inst : inst_t) : bv7 = inst[31:25];

    procedure encode_itype_arith(args : itype_arith_t)
        returns (inst : inst_t)
    {
        var f3 : bv3;
        var i : itype_arith_inst_t;
        i = args.inst;
        case
            (i == ADDI) : { f3 = F3_ADDI; }
            (i == SLTI) : { f3 = F3_SLTI; }
            (i == SLTIU) : { f3 = F3_SLTIU; }
            (i == XORI) : { f3 = F3_XORI; }
            (i == ORI) : { f3 = F3_ORI; }
            (i == ANDI) : { f3 = F3_ANDI; }
        esac
        inst = args.imm ++ args.rs1 ++ f3 ++ args.rd ++ OPCODE_I_ARITH;
    }

    procedure encode_itype_shift(args : itype_shift_t)
        returns (inst : inst_t)
    {
        var f3 : bv3;
        var f7 : bv7;
        var i : itype_shift_inst_t;
        i = args.inst;
        case
            (i == SLLI) : { f3 = F3_SLLI; f7 = 0bv7; }
            (i == SRAI) : { f3 = F3_SRI; f7 = 0b0100000bv7; }
            (i == SRLI) : { f3 = F3_SRI; f7 = 0bv7; }
        esac
        inst = f7 ++ args.shamt ++ args.rs1 ++ f3 ++ args.rd ++ OPCODE_I_ARITH;
    }

    procedure encode_rtype(args : rtype_t)
        returns (inst : inst_t)
    {
        var f3 : bv3;
        var f7 : bv7;
        var i : rtype_inst_t;
        i = args.inst;
        case
            (i == ADD || i == SUB) : { f3 = F3_ADD; }
            (i == SUB) : { f3 = F3_ADD; }
            (i == SLL) : { f3 = F3_SLL; }
            (i == SLT) : { f3 = F3_SLT; }
            (i == SLTU) : { f3 = F3_SLTU; }
            (i == XOR) : { f3 = F3_XOR; }
            (i == SRL || i == SRA) : { f3 = F3_SR; }
            (i == OR) : { f3 = F3_OR; }
            (i == AND) : { f3 = F3_AND; }
        esac
        if (args.inst == SUB || args.inst == SRA) {
            f7 = 0b0100000bv7;
        } else {
            f7 = 0bv7;
        }
        inst = f7 ++ args.rs2 ++ args.rs1 ++ f3 ++ args.rd ++ OPCODE_R;
    }

    const OPCODE_I_MEM      : bv7 = 0b0000011bv7;
    const OPCODE_I_ARITH    : bv7 = 0b0010011bv7;
    const OPCODE_R          : bv7 = 0b0110011bv7;
    const OPCODE_S          : bv7 = 0b0100011bv7;
    const OPCODE_B          : bv7 = 0b1100011bv7;
    const OPCODE_AUIPC      : bv7 = 0b0010111bv7;
    const OPCODE_LUI        : bv7 = 0b0110111bv7;
    const OPCODE_JAL        : bv7 = 0b1101111bv7;
    const OPCODE_JALR       : bv7 = 0b1100111bv7;

    // ===== BEGIN FUNCT3 DEFINITIONS =====
    const F3_ADD    : bv3 = 0b000bv3;
    const F3_SLL    : bv3 = 0b001bv3;
    const F3_SLT    : bv3 = 0b010bv3;
    const F3_SLTU   : bv3 = 0b011bv3;
    const F3_XOR    : bv3 = 0b100bv3;
    const F3_SR     : bv3 = 0b101bv3;
    const F3_OR     : bv3 = 0b110bv3;
    const F3_AND    : bv3 = 0b111bv3;

    const F3_ADDI   : bv3 = 0b000bv3;
    const F3_SLLI   : bv3 = 0b001bv3;
    const F3_SLTI   : bv3 = 0b010bv3;
    const F3_SLTIU  : bv3 = 0b011bv3;
    const F3_XORI   : bv3 = 0b100bv3;
    const F3_SRI    : bv3 = 0b101bv3;
    const F3_ORI    : bv3 = 0b110bv3;
    const F3_ANDI   : bv3 = 0b111bv3;
    const F3_LB     : bv3 = 0b000bv3;
    const F3_LH     : bv3 = 0b001bv3;
    const F3_LW     : bv3 = 0b010bv3;
    // const F3_LD     : bv3 = 0b011bv3;
    const F3_LBU    : bv3 = 0b100bv3;
    const F3_LHU    : bv3 = 0b101bv3;
    // const F3_LWU    : bv3 = 0b111bv3;

    const F3_SB     : bv3 = 0b000bv3;
    const F3_SH     : bv3 = 0b001bv3;
    const F3_SW     : bv3 = 0b010bv3;

    const F3_BEQ    : bv3 = 0b000bv3;
    const F3_BNE    : bv3 = 0b001bv3;
    const F3_BLT    : bv3 = 0b100bv3;    
    const F3_BGE    : bv3 = 0b101bv3;    
    const F3_BLTU   : bv3 = 0b110bv3;    
    const F3_BGEU   : bv3 = 0b111bv3;    
    // ===== END FUNCT3 DEFINITIONS =====
}
